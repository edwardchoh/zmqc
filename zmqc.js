// Generated by CoffeeScript 1.6.3
(function() {
  var Args, args, main, splitBuffer, zmq;

  Args = require('arg-parser');

  zmq = require('zmq');

  args = new Args('zmqc', '0.1', 'A small but powerful command-line interface to ZMQ', 'https://github.com/edwardchoh/zmqc');

  args.add({
    name: 'delimiter',
    desc: "Separate messages on input/output should be delimited by NULL characters (instead of newlines). Use this if your messages may contain newlines, and you want to avoid ambiguous message borders.",
    switches: ['-0', '--delimiter'],
    "default": '\0',
    value: 'delimiter'
  });

  args.add({
    name: 'number',
    desc: "Receive/send only NUM messages. By default, zmqc lives forever in 'read' mode, or until the end of input in 'write' mode.",
    switches: ['-n', '--NUM'],
    "default": 0
  });

  args.add({
    name: 'type',
    desc: "Which type of socket to create. Must be one of 'PUSH', 'PULL', 'PUB', 'SUB', 'REQ', 'REP' or 'PAIR'.",
    switches: ['-t', '--type'],
    required: true,
    value: 'type'
  });

  args.add({
    name: 'read',
    desc: "Read messages from the socket onto stdout.",
    switches: ['-r', '--read']
  });

  args.add({
    name: 'write',
    desc: "Write messages from stdin to the socket.",
    switches: ['-w', '--write']
  });

  args.add({
    name: 'bind',
    desc: "Bind to the specified address(es).",
    switches: ['-b', '--bind'],
    value: 'bind'
  });

  args.add({
    name: 'connect',
    desc: "Connect to the specified address(es).",
    switches: ['-c', '--connect'],
    value: 'connect'
  });

  args.add({
    name: 'options',
    desc: "Socket option names and values to set on the created socket. Consult `man zmq_setsockopt` for a comprehensive list of options. Note that you can safely omit the 'ZMQ_' prefix from the option name. If the created socket is of type 'SUB', and no 'SUBSCRIBE' options are given, the socket will automatically be subscribed to everything.",
    switches: ['-o', '--options'],
    value: 'options'
  });

  args.add({
    name: 'topic',
    desc: "Specify topic for PUB or SUB socket. Defaults to all topics",
    switches: ['-t', '--topic'],
    value: 'topic',
    "default": ''
  });

  splitBuffer = function(buf, delim) {
    var arr, i, p, _i, _ref;
    arr = [];
    p = 0;
    for (i = _i = 0, _ref = buf.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
      if (buf[i] !== delim) {
        continue;
      }
      if (i === 0) {
        p = 1;
        continue;
      } else {
        arr.push(buf.slice(p, i));
        p = i + 1;
      }
    }
    if (arr.length === 0) {
      return buf;
    }
    if (p < buf.length) {
      arr.push(buf.slice(p, buf.length));
    }
    return arr;
  };

  main = function() {
    var sock;
    sock = zmq.socket(args.params.type);
    if (args.params.bind) {
      sock.bindSync(args.params.bind);
    } else {
      sock.connect(args.params.connect);
    }
    if (args.params.write) {
      return process.stdin.on('readable', function() {
        var chunk;
        chunk = process.stdin.read();
        if (chunk !== null) {
          return sock.send(splitBuffer(chunk, args.params.delimiter));
        }
      });
    } else {
      return sock.on('message', function(data) {
        return process.stdout.write(data);
      });
    }
  };

  if (!args.parse()) {
    return args.help();
  }

  args.params.type = args.params.type.toLowerCase();

  if ((args.params.read && args.params.write) || (!args.params.read && !args.params.write)) {
    console.warn("Must specify either --read or --write");
  } else if ((args.params.bind && args.params.connect) || (!args.params.bind && !args.params.connect)) {
    console.warn("Must specify either --bind or --connect");
  } else if (args.params.write && args.params.type === 'sub') {
    console.warn("Cannot write to a SUB socket");
  } else if (args.params.read && args.params.type === 'pub') {
    console.warn("Cannot read from a PUB socket");
  } else {
    return main();
  }

  args.help();

  return;

}).call(this);
